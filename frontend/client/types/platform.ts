// Comprehensive type definitions for Talkcon tutoring platform

// Core User Types
export interface User {
  id: string;
  email: string;
  name: string;
  role: "student" | "teacher" | "admin";
  profileImage?: string;
  phone?: string;
  timezone: string;
  emailVerified: boolean;
  twoFactorEnabled: boolean;
  status: "active" | "suspended" | "pending";
  createdAt: string;
  updatedAt: string;
}

export interface StudentProfile {
  id: string;
  userId: string;
  languages: string[];
  learningGoals: string[];
  level: "beginner" | "intermediate" | "advanced";
  preferences: {
    lessonDuration: number;
    teacherGender?: "male" | "female" | "any";
    communicationStyle: string[];
  };
}

export interface TeacherProfile {
  id: string;
  userId: string;
  bio: string;
  languages: string[];
  specializations: string[];
  experience: number;
  education: string;
  certifications: string[];
  hourlyRate: number;
  rating: number;
  totalLessons: number;
  totalStudents: number;
  availability: TimeSlot[];
  meetingPlatforms: MeetingPlatform[];
  bankDetails?: BankDetails;
  isVerified: boolean;
  status: "pending" | "approved" | "rejected" | "suspended";
  absenceCount: number;
  lastAbsenceDate?: string;
}

// Booking and Scheduling Types
export interface TimeSlot {
  id: string;
  teacherId: string;
  dayOfWeek: number; // 0-6 (Sunday to Saturday)
  startTime: string; // HH:mm format
  endTime: string;
  isRecurring: boolean;
  isBooked: boolean;
  isBlocked: boolean;
  date?: string; // For specific date slots
}

export interface Booking {
  id: string;
  studentId: string;
  teacherId: string;
  timeSlotId: string;
  date: string;
  startTime: string;
  endTime: string;
  duration: number;
  status: "pending" | "confirmed" | "completed" | "cancelled" | "rescheduled";
  price: number;
  commission: number;
  tax: number;
  totalPrice: number;
  meetingInfo?: MeetingInfo;
  rescheduleCount: number;
  completedAt?: string;
  cancelledAt?: string;
  cancelReason?: string;
  notes?: string;
  createdAt: string;
  updatedAt: string;
}

export interface MeetingInfo {
  platform: string;
  meetingId: string;
  joinUrl: string;
  password?: string;
  phone?: string;
}

export interface MeetingPlatform {
  platform: "zoom" | "teams" | "meet" | "skype" | "whatsapp";
  enabled: boolean;
  settings: Record<string, any>;
}

// Payment Types
export interface PaymentMethod {
  id: string;
  type:
    | "visa"
    | "mastercard"
    | "paypal"
    | "apple_pay"
    | "google_pay"
    | "wechat_pay";
  last4?: string;
  expiryMonth?: number;
  expiryYear?: number;
  isDefault: boolean;
  email?: string; // For PayPal
}

export interface WalletTransaction {
  id: string;
  userId: string;
  type: "credit" | "debit";
  amount: number;
  description: string;
  status: "pending" | "completed" | "failed";
  paymentMethod?: string;
  referenceId?: string;
  createdAt: string;
}

export interface PayoutRequest {
  id: string;
  teacherId: string;
  amount: number;
  method: "paypal" | "bank_transfer";
  details: Record<string, any>;
  status: "pending" | "approved" | "rejected" | "processed";
  requestedAt: string;
  processedAt?: string;
  notes?: string;
}

export interface BankDetails {
  bankName: string;
  accountNumber: string;
  routingNumber: string;
  accountHolderName: string;
}

// Messaging Types
export interface Message {
  id: string;
  conversationId: string;
  senderId: string;
  content: string;
  type: "text" | "image" | "file" | "system";
  attachments?: Attachment[];
  readAt?: string;
  isReported: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Conversation {
  id: string;
  participants: string[];
  lastMessage?: Message;
  unreadCount: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Attachment {
  id: string;
  name: string;
  url: string;
  type: string;
  size: number;
}

// Reviews and Ratings Types
export interface Review {
  id: string;
  bookingId: string;
  studentId: string;
  teacherId: string;
  rating: number; // 1-5 stars
  comment?: string;
  tags: string[];
  isAutoGenerated: boolean;
  isPublic: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface ReviewStats {
  averageRating: number;
  totalReviews: number;
  ratingDistribution: Record<number, number>;
  commonTags: string[];
}

// Support System Types
export interface SupportTicket {
  id: string;
  userId: string;
  category:
    | "booking_issues"
    | "payment_issues"
    | "technical_issues"
    | "inappropriate_behavior";
  title: string;
  description: string;
  priority: "low" | "medium" | "high" | "urgent";
  status: "open" | "in_progress" | "resolved" | "closed";
  assignedTo?: string;
  messages: SupportMessage[];
  createdAt: string;
  updatedAt: string;
  resolvedAt?: string;
}

export interface SupportMessage {
  id: string;
  ticketId: string;
  senderId: string;
  content: string;
  attachments?: Attachment[];
  isStaff: boolean;
  createdAt: string;
}

// Calendar and Schedule Types
export interface CalendarEvent {
  id: string;
  title: string;
  description?: string;
  startTime: string;
  endTime: string;
  type: "lesson" | "availability" | "break" | "event";
  status: "scheduled" | "completed" | "cancelled";
  participants?: string[];
  meetingInfo?: MeetingInfo;
  color?: string;
}

export interface Schedule {
  userId: string;
  timezone: string;
  events: CalendarEvent[];
  availability: TimeSlot[];
  blockedTimes: TimeSlot[];
}

// Authentication Types
export interface AuthProvider {
  id: string;
  name: "email" | "google" | "facebook" | "apple";
  enabled: boolean;
  clientId?: string;
}

export interface TwoFactorAuth {
  enabled: boolean;
  secret?: string;
  backupCodes: string[];
  lastUsedAt?: string;
}

// Admin Dashboard Types
export interface AdminStats {
  totalUsers: number;
  totalTeachers: number;
  totalStudents: number;
  totalLessons: number;
  totalRevenue: number;
  monthlyRevenue: number;
  activeBookings: number;
  pendingPayouts: number;
  openTickets: number;
  userGrowth: {
    month: string;
    users: number;
    teachers: number;
    students: number;
  }[];
  revenueGrowth: {
    month: string;
    revenue: number;
    lessons: number;
  }[];
}

export interface AdminActivity {
  id: string;
  adminId: string;
  action: string;
  targetType: string;
  targetId: string;
  details: Record<string, any>;
  ipAddress: string;
  userAgent: string;
  createdAt: string;
}

// Notification Types
export interface Notification {
  id: string;
  userId: string;
  type: "booking" | "payment" | "message" | "review" | "system";
  title: string;
  message: string;
  data?: Record<string, any>;
  isRead: boolean;
  createdAt: string;
}

// Search and Filter Types
export interface TeacherFilter {
  languages?: string[];
  specializations?: string[];
  minRating?: number;
  maxPrice?: number;
  availability?: {
    days: number[];
    timeRange: string[];
  };
  experience?: number;
  isVerified?: boolean;
}

export interface BookingFilter {
  status?: string[];
  dateRange?: {
    start: string;
    end: string;
  };
  teacherId?: string;
  studentId?: string;
}

// API Response Types
export interface ApiResponse<T = any> {
  success: boolean;
  data: T;
  message?: string;
  meta?: {
    pagination?: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
  };
}

export interface ApiError {
  success: false;
  message: string;
  code?: string;
  errors?: Record<string, string[]>;
}

// Form Types
export interface LoginForm {
  email: string;
  password: string;
  rememberMe: boolean;
  twoFactorCode?: string;
}

export interface RegisterForm {
  name: string;
  email: string;
  password: string;
  passwordConfirmation: string;
  role: "student" | "teacher";
  timezone: string;
  termsAccepted: boolean;
}

export interface BookingForm {
  teacherId: string;
  timeSlotId: string;
  date: string;
  duration: number;
  notes?: string;
  paymentMethodId: string;
}

export interface TeacherApplicationForm {
  bio: string;
  languages: string[];
  specializations: string[];
  experience: number;
  education: string;
  certifications: string[];
  hourlyRate: number;
  sampleVideo?: File;
  documents: File[];
}

// Utility Types
export type UserRole = "student" | "teacher" | "admin";
export type BookingStatus =
  | "pending"
  | "confirmed"
  | "completed"
  | "cancelled"
  | "rescheduled";
export type PaymentStatus = "pending" | "completed" | "failed" | "refunded";
export type TicketCategory =
  | "booking_issues"
  | "payment_issues"
  | "technical_issues"
  | "inappropriate_behavior";
export type TicketStatus = "open" | "in_progress" | "resolved" | "closed";
export type NotificationType =
  | "booking"
  | "payment"
  | "message"
  | "review"
  | "system";
